/// Name of the Azure DataLake Gen2 storage account to pull data from.
expression 'Storage URL' = "https://ftkmicfland5pd7gdo37oozc.dfs.core.windows.net/ingestion" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text]
	lineageTag: 421c1232-0e40-45a4-bc59-257ce648478c
	queryGroup: 'üõ†Ô∏è Setup\FinOps hubs'

	annotation PBI_ResultType = Text

expression RangeStart = #datetime(2024, 1, 1, 0, 0, 0) meta [IsParameterQuery=true, Type="DateTime", IsParameterQueryRequired=true]
	lineageTag: 90085870-f708-4bc2-90c1-3a343e88a26b
	queryGroup: 'üõ†Ô∏è Setup\FinOps hubs'

	annotation PBI_ResultType = DateTime

expression RangeEnd = #datetime(2025, 1, 1, 0, 0, 0) meta [IsParameterQuery=true, Type="DateTime", IsParameterQueryRequired=true]
	lineageTag: 695f1d3b-7b1a-49fa-8d83-f2c25dc787de
	queryGroup: 'üõ†Ô∏è Setup\FinOps hubs'

	annotation PBI_ResultType = DateTime

/// Enter the number of months
expression 'Number of Months' = 1 meta [IsParameterQuery = true, IsParameterQueryRequired = false, Type = type number]
	lineageTag: 2ddc095d-bca9-471d-b5e9-70a45facb053
	queryGroup: 'üõ†Ô∏è Setup\CM connector'

	annotation PBI_ResultType = Number

/// Loads data from the configured FinOps hub.
/// 
/// Learn more @ https://aka.ms/finops/hubs
expression ftk_Hub = ```
		(optional datasetType as text, optional startDate as datetime, optional endDate as datetime) =>
		let
		    // Config
		    url     = #"Storage URL",
		    start   = if startDate = null then RangeStart else startDate,
		    end     = if endDate = null then RangeEnd else endDate,
		// TODO: Allow pulling other datasets -- if datasetType = null or datasetType = "" then "focuscost" else datasetType
		    dataset = "focuscost",
		
		    ADLS = AzureStorage.DataLake(url),
		    FilterHiddenFiles = Table.SelectRows(ADLS, each [Attributes]?[Hidden]? <> true),
		
		    // Parse folder path
		    Dataset   = Table.AddColumn(FilterHiddenFiles, "Dataset",   each List.Last(List.RemoveLastN(Text.Split([Folder Path],"/"), 1))),
		    Month     = Table.AddColumn(Dataset,           "Month",     each List.Last(List.RemoveLastN(List.RemoveLastN(Text.Split([Folder Path],"/"), 1), 1) )),
		// TODO: Update date handling for raw exports
		    StartDate = Table.AddColumn(Month,             "StartDate", each [Month] & "01"),
		    StartDate_type = Table.TransformColumnTypes(StartDate, {{"StartDate", type date}}),
		    EndDate   = Table.AddColumn(StartDate_type,    "EndDate",   each Date.EndOfMonth([StartDate])),
		
		    // Only FOCUS costs
		// TODO: Include CSV files for raw exports
		    FilterFilesByMetricAndFileType = Table.SelectRows(EndDate, each [Dataset] = dataset and [Extension] = ".parquet"),
		
		    // Only process files for months within the date range
		    FilterFilesByDate =
		        if start = null and end = null then FilterFilesByMetricAndFileType
		        else Table.SelectRows(FilterFilesByMetricAndFileType, each (start = null or [StartDate] >= Date.StartOfMonth(Date.From(start))) and (end = null or [EndDate] <= Date.EndOfMonth(Date.From(end)))),
		
		    // Extract
		    unpack = (zipData) => Table.PromoteHeaders(Csv.Document(Binary.Decompress(zipData, Compression.GZip), [Delimiter=",", Columns=60, Encoding=1252, QuoteStyle=QuoteStyle.Csv, CsvStyle=CsvStyle.QuoteAlways]), [PromoteAllScalars=true]),
		// TODO: Add dataset type column based on file path (or manifest for exports)
		    SelectContent = Table.SelectColumns(FilterFilesByDate, {"Content", "Extension"}),
		    UnpackContent = Table.AddColumn(SelectContent, "Custom", each if [Extension] = ".gz" then unpack([Content]) else if [Extension] = ".parquet" then Parquet.Document([Content]) else [Content]),
		    ExpandedColumns = Table.ExpandTableColumn(UnpackContent, "Custom", List.Sort(Table.ColumnNames(List.First(UnpackContent[Custom], null)))),
		    RemovedContent = Table.RemoveColumns(ExpandedColumns, {"Content", "Extension"}),
		
		    // Only pull from the predefined date range (if specified)
		    tbl = RemovedContent,
		    FilterRowsByDate =
		        if start = null and end = null then tbl
		        else Table.SelectRows(tbl, each
		            (start = null or [ChargePeriodEnd] >= DateTime.From(start))
		            and (end = null or [ChargePeriodStart] < DateTime.From(end))
		        ),
		
		    // TODO: Extract from the manifest
		    _armResourceName = (id) => List.Last(Text.Split(id, "/")),
		    DataType    = Table.AddColumn(FilterRowsByDate, "x_DatasetType", each dataset),
		    DataVer     = Table.AddColumn(DataType,         "x_DatasetVersion", 
		        each if Table.HasColumns(Dataset, {"ChageClass"}) then (
		            if Table.HasColumns(Dataset, {"ChargeSubcategory"}) then (
		                if ([Region] = null and [RegionName] <> null) or ([x_OnDemandCost] = null and [ContractedCost] <> null) or ([ChargeSubcategry] = null and [CommitmentDiscountStatus] <> null) then "1.0"
		                else if ([Region] <> null and [RegionName] = null) or ([x_OnDemandCost] <> null and [ContractedCost] = null) or ([ChargeSubcategry] <> null and [CommitmentDiscountStatus] = null) then "1.0-preview(v1)"
		                else "Unknown"
		            ) else "1.0"
		        ) else "1.0-preview(v1)"
		    ),
		    AccountType = Table.AddColumn(DataVer,          "x_AccountType", 
		        each if [BillingAccountId] = [SubAccountId] then "MOSA"
		        else if _armResourceName([BillingAccountId]) = [x_BillingAccountId] then "EA"
		        else if _armResourceName([BillingAccountId]) = [x_BillingProfileId] then (if [InvoiceIssuerName] = "Microsoft" then "MCA" else "MPA")
		        else "Unknown"
		    ),
		
		    Output = AccountType
		in
		    Output
		```
	lineageTag: 1195459e-bb6d-4ef2-8823-5f63c16fbcf5
	queryGroup: 'üõ†Ô∏è Setup\Functions'

	annotation PBI_ResultType = Function

	annotation PBI_NavigationStepName = Navigation

expression '‚ñ∂Ô∏è  START HERE' = ```
		let
		    // Storage
		    StorageUrl = #"Storage URL",
		    StorageSegments = if StorageUrl <> null then Text.Split(Text.Trim(StorageUrl, "/"), "/") else {},
		    StorageSegmentCount = List.Count(StorageSegments),
		    StorageCheck = 
		        if StorageUrl = "" or StorageUrl = null then {"‚úñ Missing", "Please specify the storage URL."}
		        else if Text.StartsWith(StorageUrl, "https://") = false then {"‚úñ Invalid", "Please check your storage URL."} 
		        else if StorageSegmentCount = 3 or (StorageSegmentCount = 4 and (Text.Lower(StorageSegments{3}) = "ingestion" or Text.Lower(StorageSegments{3}) = "msexports")) then (
		            let
		                // Looks like hubs; try to get hub version
		                Settings = try Json.Document(AzureStorage.DataLake(StorageUrl & (if StorageSegmentCount = 3 then "/config" else "/../config")){[Name="settings.json"]}[Content], 1252) otherwise null,
		                HubVersion = if Settings <> null then try Settings[version] otherwise null else null,
		                Output = 
		                    if HubVersion = null then (
		                        if StorageSegmentCount = 4 and Text.Lower(StorageSegments{3}) = "ingestion" 
		                        then {"‚ùìÔ∏è Unconfirmed", "Unable to confirm FinOps hub version from storage: " & Text.Split(StorageUrl, "."){0} & "."}
		                        else {"‚úñÔ∏è Invalid", "Configured storage account does not have FinOps hubs deployed."}
		                    )
		                    else (
		                        if StorageSegmentCount = 3 or (StorageSegmentCount = 4 and Text.Lower(StorageSegments{3}) = "msexports") then {"‚úñ Invalid", "Referencing the wrong container ‚Äì Change to ingestion container."}
		                        else {"‚úîÔ∏è Specified", "Will pull costs from FinOps hub v" & HubVersion & " storage: " & Text.Split(StorageUrl, "."){0} & "."}
		                    )
		            in
		                Output
		        )
		        else {"‚úñÔ∏è Invalid", "Configured storage account is not a FinOps hub deployment: " & Text.Split(StorageUrl, "."){0} & "."},
		
		    // Incremental refresh
		    DateStart = RangeStart,
		    DateEnd = RangeEnd,
		    _formatDate = (d) => try DateTime.ToText(d, [Format="MMM d, yyyy"]) otherwise d,
		    DateStartFormat = if DateStart = null or DateStart = "" then "*" else _formatDate(DateStart),
		    DateEndFormat = if DateEnd = null or DateEnd = "" then "*" else _formatDate(DateEnd),
		    DateValue = if DateStartFormat = "*" and DateEndFormat = "*" then "(no dates)" else DateStartFormat & " - " & DateEndFormat,
		    DateCheck = 
		        if DateValue = "(no dates)"   then {"‚ö†Ô∏è Warning", "Will pull all data. May fail if over $2-5M."}
		        else if DateEndFormat   = "*" then {"‚ö†Ô∏è Warning", "Will pull all data before end date. May fail if over $2-5M."}
		        else if DateStartFormat = "*" then {"‚ö†Ô∏è Warning", "Will pull all data after start date. May fail if over $2-5M."}
		        else if DateStart > DateEnd then {"‚úñ Invalid", "The start date must be before the end date."}
		        else if DateStart < DateEnd then try {"‚úîÔ∏è Specified", "Will pull costs for " & Number.ToText(Duration.Days(DateEnd - DateStart)) & " days."} otherwise {"‚úñ Invalid", "Unable to parse dates: " & DateStart & " - " & DateEnd & "."}
		        else {"‚úñ Invalid", "Unable to confirm dates: '" & DateStart & "' - '" & DateEnd & "'."},
		
		    // Connector
		    ScopeType = if Scope = "" or Scope = null then "" else if Text.Contains(Scope, "-") then "MCA" else "EA",
		    ScopeCheck = 
		        if ScopeType = "" then {"‚úñ Missing", "Please specify an EA enrollment number or MCA scope ID."}
		        else if ScopeType = "MCA" then (
		            if Text.StartsWith(Text.Lower(Scope), "/providers/microsoft.billing/billingaccounts/") = false then {"‚úñ Invalid", "Please specify a fully-qualified scope ID to connect to an MCA account."}
		            else if Text.Contains(Text.Lower(Scope), "/billingprofiles/") then {"‚úîÔ∏è Specified", "Connecting to MCA billing profile."}
		            else {"‚úñ Invalid", "Please specify a billing profile to include reservation recommendations."}
		        )
		        else {"‚úîÔ∏è Specified", "Connecting to EA enrollment " & Scope & "."},
		    TypeCheck = 
		        if ScopeType = "EA" then (if Type = "Enrollment Number" then {"‚úîÔ∏è Specified", "Connecting to an EA account."} else {"‚úñ Invalid", "Type must be 'Enrollment Number' for EA accounts."})
		        else if ScopeType = "MCA" then (if Type = "Manually Input Scope" then {"‚úîÔ∏è Specified", "Connecting to an MCA account."} else {"‚úñ Invalid", "Type must be 'Manually Input Scope' for MCA accounts."})
		        else if Type = "Enrollment Number" then {"‚úîÔ∏è Specified", "Expecting an EA account. Please specify the Scope parameter."}
		        else if Type = "Manually Input Scope" then {"‚úîÔ∏è Specified", "Expecting an MCA account. Please specify the Scope parameter."}
		        else {"‚úñ Invalid", "Please select a Type value."},
		    Months = #"Number of Months",
		    MonthCheck = 
		        if Months = "" or Months = null then {"‚úñ Missing", "Please specify the number of months to include."}
		        else if Months < 0 then {"‚úñ Invalid", "Please specify 0 for only the current month or 1+ to include one or more previous months."}
		        else {"‚úîÔ∏è Specified", "Will get data for " & Text.From(Months) & (if Months = 1 then " month." else " months.")},
		
		    // 
		    /*
		    Step1 = Table.InsertRows(#table({"Instructions", "Value", "Status", "Message"}, {}), 0, {
		        [ Instructions = "‚ë† Set the data source parameter on the left", Value = SourceType, Status = SourceCheck{0}, Message = SourceCheck{1} ],
		        [ Instructions = "        ‚ûñ About exports @ https://aka.ms/finops/toolkit/exports", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ About FinOps hubs @ https://aka.ms/finops/hubs", Value = "", Status = "", Message = "" ],
		        [ Instructions = "", Value = "", Status = "", Message = "" ]
		    }),
		
		    MainChecks = Table.InsertRows(Step1, 4, 
		    */
		
		    MainChecks = Table.InsertRows(#table({"Instructions", "Value", "Status", "Message"}, {}), 0, {
		        [ Instructions = "‚ë† Set the storage URL parameter on the left", Value = StorageUrl, Status = StorageCheck{0}, Message = StorageCheck{1} ],
		        [ Instructions = "        ‚ûñ Go to your hub resource group", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ Open Deployments > `hub` > Outputs", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ Copy the 'storageUrlForPowerBI' value", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ", Value = "", Status = "", Message = "" ],
		        [ Instructions = "‚ë° Set the start/end dates", Value = DateValue, Status = DateCheck{0}, Message = DateCheck{1} ],
		        [ Instructions = "        ‚ûñ Dates are only required to support incremental refresh", Value = "", Status = "", Message = if DateCheck{0} = "‚ö†Ô∏è Warning" then "Incremental refresh requires dates." else if DateCheck{0} = "‚úîÔ∏è Specified" then "Please configure incremental refresh to support up to $2-5M/mo." else "" ],
		        [ Instructions = "        ‚ûñ NOTE: Power BI only supports a total of $2-5M without incremental refresh", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ", Value = "", Status = "", Message = "" ],
		        [ Instructions = "‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ", Value = "", Status = "", Message = "" ],
		        [ Instructions = "The following are only needed for reservation recommendations", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ", Value = "", Status = "", Message = "" ],
		        [ Instructions = "‚ë¢ Set the Scope parameter on the left", Value = Scope, Status = ScopeCheck{0}, Message = ScopeCheck{1} ],
		        [ Instructions = "        ‚ûñ If using EA, set it to your enrollment number", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ If using MCA, use the following steps to set your scope ID", Value = "", Status = "", Message = "" ],
		        [ Instructions = "              1. Go to https://aka.ms/costmgmt/config", Value = "", Status = "", Message = "" ],
		        [ Instructions = "              2. Change scope to the desired billing profile", Value = "", Status = "", Message = "" ],
		        [ Instructions = "              3. Select the Properties tile", Value = "", Status = "", Message = "" ],
		        [ Instructions = "              4. Use the 'ID' and 'Billing account ID' values to generate the scope ID", Value = "", Status = "", Message = "Example: /providers/Microsoft.Billing/billingAccounts/<id>/billingProfiles/<id>" ],
		        [ Instructions = "                   NOTE: Billing profile is required for MCA reservation recommendations", Value = "", Status = "", Message = "" ],
		        [ Instructions = "              5. Save the value in 'CM connector' > 'Scope'", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ", Value = "", Status = "", Message = "" ],
		        [ Instructions = "‚ë£ Set the Type parameter based on your account type", Value = Type, Status = TypeCheck{0}, Message = TypeCheck{1} ],
		        [ Instructions = "        ‚ûñ For EA, use 'Enrollment Number'", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ For MCA, use 'Manually Input Scope'", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ This value is required for the Cost Management connector", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ", Value = "", Status = "", Message = "" ],
		        [ Instructions = "‚ë§ Set the number of months to include (more = slower load time)", Value = Months, Status = MonthCheck{0}, Message = MonthCheck{1} ],
		        [ Instructions = "        ‚ûñ 0  = current month only", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ 1  = current month and 1 previous month", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ 2+ = current month and 2+ previous months", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ NOTE: Power BI can only support ~$16M in cost details!", Value = "", Status = "", Message = "" ]
		    })
		in
		    MainChecks
		```
	lineageTag: 6cfe80b8-1c4b-4c11-9916-43fc98b49dac
	queryGroup: 'üõ†Ô∏è Setup\Instructions'

	annotation PBI_ResultType = Exception

	annotation PBI_NavigationStepName = Navigation

/// Loads data from the configured FinOps hubs instance or from a billing account using the Cost Management connector.
/// datasets = 0 (Actual cost), 1 (Amortized cost), 2 (Both)
expression ftk_CMConnector =
		(optional dataset) =>
		let
		    Connector = AzureCostManagement.Tables(Type, Scope, #"Number of Months", []),
		    Data = if dataset = "" or dataset = null then Connector else Connector{[Key=dataset]}[Data]
		in
		    Data
	lineageTag: 9fcc7fe0-336d-49fd-9a77-eeb57b2f7aef
	queryGroup: 'üõ†Ô∏è Setup\Functions'

	annotation PBI_ResultType = Function

/// Enter your EA enrollment number or fully-qualified MCA billing profile resource ID. You must have at least read access to use Power BI. For more options, please use https://aka.ms/finops/hubs.
expression Scope = "8611537" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: 244a1951-f3fa-4d07-913e-c5770a195267
	queryGroup: 'üõ†Ô∏è Setup\CM connector'

	annotation PBI_ResultType = Text

/// Select "Enrollment Number" if using EA; otherwise, select "Manually Input Scope". These values are required in order to refresh data from the connector in the Power BI service.
expression Type = "Enrollment Number" meta [IsParameterQuery=true, List={"Enrollment Number", "Manually Input Scope"}, DefaultValue="Enrollment Number", Type="Text", IsParameterQueryRequired=true]
	lineageTag: e700b3d3-f2af-45a3-af15-199df0040f7b
	queryGroup: 'üõ†Ô∏è Setup\CM connector'

	annotation PBI_ResultType = Text

